---
description:
globs:
alwaysApply: false
---
# SkySpark Integration Patterns

## API Integration Architecture
The application integrates with SkySpark BACnet servers using Zinc format parsing with fallback to mock data.

## Key Integration Files
- [app/api/points/route.ts](mdc:app/api/points/route.ts) - Main API endpoint for fetching BACnet points
- [lib/skyspark-api.ts](mdc:lib/skyspark-api.ts) - SkySpark API client and Zinc parsing
- [lib/mock-data.ts](mdc:lib/mock-data.ts) - Fallback mock data for development
- [lib/equipment-detection.ts](mdc:lib/equipment-detection.ts) - Equipment grouping algorithms

## Data Flow Pattern
1. **API Call**: Frontend requests data from `/api/points`
2. **SkySpark Connection**: Attempts connection to SkySpark server with session cookies
3. **Zinc Parsing**: Parses Zinc format responses into JavaScript objects
4. **Data Transformation**: Converts raw BACnet data to application format
5. **Equipment Detection**: Groups points by equipment using confidence algorithms
6. **Fallback**: Uses mock data if SkySpark connection fails

## SkySpark Connection Requirements
- Base URL: `http://localhost:8081`
- Project: Configurable (e.g., 'mckinstrywashougales')
- Authentication: Session cookies and attest keys
- Response Format: Zinc format with headers

## Data Transformation Process
Raw SkySpark data includes:
- **Points Data**: BACnet point information with equipRef, navName, kind, unit
- **Connector Data**: BACnet device information (vendor, model, device names)
- **Equipment Grouping**: Automatic grouping by equipRef with confidence scoring

## Error Handling Pattern
```typescript
try {
  const skysparkData = await fetchFromSkySpark();
  return { success: true, data: skysparkData, source: 'skyspark' };
} catch (error) {
  console.warn('SkySpark failed, using mock data:', error);
  return { success: true, data: mockData, source: 'mock_fallback', error: error.message };
}
```

## Equipment Detection Algorithm
- Groups points by `equipRef` field
- Calculates confidence scores (typically 0.95 for SkySpark data)
- Detects equipment types: AHUs, VAVs, FCUs, etc.
- Applies vendor/model information from connector data
