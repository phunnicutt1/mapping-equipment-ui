---
description:
globs:
alwaysApply: false
---
# Store Patterns & State Management

## Store Architecture
The application uses Zustand for state management in [lib/store.ts](mdc:lib/store.ts) with a single store pattern.

## Key Store Sections

### Core Data State
```typescript
interface GroupingState {
  points: BACnetPoint[];           // All BACnet points from SkySpark
  equipmentInstances: Equipment[]; // Detected equipment instances
  equipmentTypes: EquipmentType[]; // Equipment type definitions
  templates: EquipmentTemplate[];  // User-created templates
  showCelebration: boolean;        // Celebration animation state
  isComplete: boolean;             // Completion tracking
}
```

### Critical Store Actions

#### Completion Detection
- `checkCompletion()` - Validates all equipment confirmed + points assigned
- Auto-triggers on equipment confirmation, point assignment, template application
- Uses event-driven architecture (no polling)
- Triggers celebration and auto-save on completion

#### Equipment Management
- `confirmEquipment(equipmentId)` - Confirms equipment and triggers completion check
- `confirmAllEquipmentPoints(equipmentId)` - Bulk point confirmation
- `createEquipment(name, typeId)` - Manual equipment creation

#### Template System
- `createTemplate(equipmentId, templateName)` - Creates reusable equipment templates with random colors
- `applyTemplateToSimilarEquipment(templateId)` - Auto-applies templates to similar equipment (70% match threshold)
- Templates serve as equipment types with unique visual identifiers

#### Point Assignment
- `assignPoints(pointIds, equipmentId)` - Bulk point assignment
- `assignSinglePoint(pointId, equipmentId)` - Individual point assignment
- All assignment actions trigger completion checks

## Store Patterns

### Action Pattern
All store actions follow this pattern:
1. Update state using `set()` 
2. Call related actions (e.g., `checkCompletion()`)
3. Add console messages for user feedback
4. Auto-save drafts when appropriate

### Completion Flow
1. User confirms equipment → Equipment status = 'confirmed'
2. Equipment filtered from MainPanel display
3. Panel becomes empty → MainPanel useEffect detects change  
4. `checkCompletion()` validates completion criteria
5. Celebration triggers + auto-save

### Template Color System
Templates automatically get assigned colors using `generateRandomTemplateColor()` from [lib/utils.ts](mdc:lib/utils.ts) with 28 vibrant color options.
